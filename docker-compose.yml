services:
  musicspree:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: musicspree
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - RUN_ON_STARTUP=true
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./src:/app/src  # For development hot-reload
      - ./containers/downloads:/downloads
      - ./containers/music-library:/music/library:ro          # Bibliothèque principale (READ-ONLY)
      - ./containers/music-recommendations:/music/recommendations:rw  # Dossier géré par MusicSpree
    depends_on:
      - navidrome
      - slskd
      - beets
    networks:
      - musicspree-network
    healthcheck:
      test: ["CMD", "spree", "test"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    ports:
      - "3000:3000"  # For future web interface

  navidrome:
    image: deluan/navidrome:latest
    container_name: navidrome
    hostname: navidrome
    restart: unless-stopped
    user: 501:20
    ports:
      - "4533:4533"
    env_file: ./containers/navidrome/navidrome.env
    volumes:
      - ./containers/navidrome/data:/data
      - ./containers/music-library:/music/library:ro           # Bibliothèque principale
      - ./containers/music-recommendations:/music/recommendations:ro  # Recommendations
    networks:
      - musicspree-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4533/ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  slskd:
    image: slskd/slskd:latest
    container_name: slskd
    hostname: slskd
    restart: unless-stopped
    ports:
      - "5030:5030"   # Web interface
      - "50300:50300" # Soulseek listening port
    environment:
      - SLSKD_REMOTE_CONFIGURATION=true
      - SLSKD_NO_HTTPS=false
      - SLSKD_HTTP_PORT=5030
      - SLSKD_HTTPS_DISABLED=true
      - SLSKD_DOWNLOADS_DIR=/downloads/complete
      - SLSKD_INCOMPLETE_DIR=/downloads/incomplete
      - SLSKD_SHARED_DIR=/data
    env_file:
      - .env
    volumes:
      - ./containers/slskd/data:/app
      - ./containers/slskd/config:/app/config
      - ./containers/downloads:/downloads
      - ./containers/music-library:/data
    networks:
      - musicspree-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5030/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  beets:
    image: lscr.io/linuxserver/beets:latest
    container_name: beets
    hostname: beets
    restart: unless-stopped
    ports:
      - "8337:8337"
    environment:
      - TZ=UTC
    volumes:
      - ./containers/beets/config:/config
      - ./containers/downloads:/downloads
      - ./containers/music-library:/music/library           # Bibliothèque principale (pour référence)
      - ./containers/music-recommendations:/music/recommendations  # Dossier de destination pour les recommendations
    networks:
      - musicspree-network
    healthcheck:
      test: ["CMD", "beet", "version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Configuration overlay for beets
    configs:
      - source: beets_config
        target: /config/config.yaml
        mode: 0644

networks:
  musicspree-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Configurations
configs:
  beets_config:
    content: |
      # Configuration Beets adaptée pour l'architecture recommendations
      directory: /music/recommendations  # Par défaut, importer vers recommendations
      library: /config/musiclibrary.db
      
      import:
        write: yes
        copy: yes
        move: no
        resume: ask
        incremental: yes
        quiet_fallback: skip
        timid: no
        log: /config/beet.log
      
      match:
        strong_rec_thresh: 0.1
        medium_rec_thresh: 0.25
        rec_gap_thresh: 0.25
      
      paths:
        # Chemins adaptés pour les recommendations
        default: $albumartist/$album/$track $title
        singleton: Singles/$artist - $title
        comp: Compilations/$album/$track $title
        
        # Règles spécifiques pour différents types
        albumtype:soundtrack: Soundtracks/$album/$track $title
        albumtype:compilation: Compilations/$album/$track $title
        albumtype:live: Live/$albumartist/$album/$track $title
      
      plugins: web fetchart embedart scrub replaygain lastgenre chroma duplicates
      
      web:
        host: 0.0.0.0
        port: 8337
      
      fetchart:
        auto: yes
        sources: coverart itunes amazon albumart wikipedia google bing
        store_source: yes
      
      embedart:
        auto: yes
        maxwidth: 1000
        quality: 95
      
      scrub:
        auto: yes
      
      replaygain:
        auto: no  # Peut être gourmand en ressources, désactivé par défaut
        backend: gstreamer
      
      lastgenre:
        auto: yes
        source: album
        fallback: unknown
        canonical: yes
      
      chroma:
        auto: yes
      
      duplicates:
        album: no
        checksum: yes
        copy: no
        count: no
        delete: no
        full: no
        keys: []
        move: no
        path: no
        strict: no
        tag: no
        tiebreak: {}
        
      # Configuration pour les différents dossiers
      paths_functions:
        # Fonction pour organiser par type de contenu
        recommendations: |
          if albumtype == 'soundtrack':
              return 'Soundtracks'
          elif albumtype == 'compilation':
              return 'Compilations'  
          elif albumtype == 'live':
              return 'Live'
          elif comp:
              return 'Compilations'
          else:
              return 'Albums'