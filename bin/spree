#!/bin/bash

# MusicSpree CLI Script
# This script provides command-line interface for MusicSpree operations

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
APP_DIR="$(dirname "$SCRIPT_DIR")"

# Load environment variables if available
if [ -f "$APP_DIR/.env" ]; then
    set -a
    source "$APP_DIR/.env"
    set +a
fi

# Helper functions
print_header() {
    echo -e "${PURPLE}üéµ MusicSpree CLI${NC}"
    echo -e "${PURPLE}==================${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

check_node_app() {
    if [ ! -f "$APP_DIR/dist/cli.js" ]; then
        print_error "CLI application not found. Please run 'npm run build' first."
        exit 1
    fi
}

# Command implementations
cmd_help() {
    print_header
    echo
    echo -e "${CYAN}Available commands:${NC}"
    echo
    echo -e "  ${GREEN}spree sync${NC}         - Run full sync process"
    echo -e "  ${GREEN}spree dry${NC}          - Dry run (show what would be downloaded)"
    echo -e "  ${GREEN}spree clear${NC}        - Clear/delete the current playlist"
    echo -e "  ${GREEN}spree status${NC}       - Show service status and configuration"
    echo -e "  ${GREEN}spree test${NC}         - Test all service connections"
    echo -e "  ${GREEN}spree logs${NC}         - Show recent logs"
    echo -e "  ${GREEN}spree stats${NC}        - Show library statistics"
    echo -e "  ${GREEN}spree config${NC}       - Show current configuration"
    echo -e "  ${GREEN}spree import${NC}       - Manually trigger beets import"
    echo -e "  ${GREEN}spree cleanup${NC}      - Cleanup empty directories"
    echo -e "  ${GREEN}spree validate${NC}     - Validate configuration"
    echo
    echo -e "${CYAN}Options:${NC}"
    echo -e "  --limit <number>      Limit number of tracks (for sync/dry commands)"
    echo -e "  --force              Force operation without confirmation"
    echo -e "  --tail <number>      Number of log lines to show"
    echo -e "  --follow             Follow logs in real time"
    echo
    echo -e "${CYAN}Examples:${NC}"
    echo -e "  spree dry --limit 25        # See what 25 tracks would be downloaded"
    echo -e "  spree sync --limit 100      # Sync up to 100 recommendations"
    echo -e "  spree clear --force         # Clear playlist without confirmation"
    echo -e "  spree logs --tail 100       # Show last 100 log lines"
    echo -e "  spree logs --follow         # Follow logs in real time"
    echo
}

cmd_sync() {
    print_header
    print_info "Starting full sync process..."
    check_node_app
    
    node "$APP_DIR/dist/cli.js" sync "$@"
}

cmd_dry() {
    print_header
    print_info "Running dry run..."
    check_node_app
    
    node "$APP_DIR/dist/cli.js" dry "$@"
}

cmd_clear() {
    print_header
    check_node_app
    
    # Check for force flag
    local force_flag=""
    for arg in "$@"; do
        if [[ "$arg" == "--force" || "$arg" == "-f" ]]; then
            force_flag="--force"
            break
        fi
    done
    
    if [[ -z "$force_flag" ]]; then
        print_warning "This will delete the current playlist: ${PLAYLIST_NAME:-LastFM Recommendations}"
        echo -n "Are you sure? (y/N): "
        read -r confirm
        if [[ ! $confirm =~ ^[Yy]$ ]]; then
            print_info "Operation cancelled"
            exit 0
        fi
        force_flag="--force"
    fi
    
    node "$APP_DIR/dist/cli.js" clear $force_flag
}

cmd_status() {
    print_header
    print_info "Checking service status..."
    check_node_app
    
    node "$APP_DIR/dist/cli.js" status "$@"
}

cmd_test() {
    print_header
    print_info "Testing service connections..."
    check_node_app
    
    node "$APP_DIR/dist/cli.js" test "$@"
}

cmd_logs() {
    print_header
    
    local tail_lines=100
    local follow=false
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --tail)
                if [[ -n "$2" && "$2" =~ ^[0-9]+$ ]]; then
                    tail_lines="$2"
                    shift 2
                else
                    print_error "Invalid --tail value. Must be a number."
                    exit 1
                fi
                ;;
            --follow|-f)
                follow=true
                shift
                ;;
            *)
                shift
                ;;
        esac
    done
    
    local log_file="$APP_DIR/data/musicspree.log"
    
    if [ -f "$log_file" ]; then
        if [ "$follow" = true ]; then
            print_info "Following logs (Ctrl+C to stop)..."
            tail -f -n "$tail_lines" "$log_file"
        else
            print_info "Showing last $tail_lines log lines..."
            tail -n "$tail_lines" "$log_file"
        fi
    else
        print_warning "Log file not found at $log_file"
        print_info "Trying container logs..."
        if command -v docker >/dev/null 2>&1; then
            docker logs musicspree --tail "$tail_lines" 2>/dev/null || print_error "Container not found or not accessible"
        else
            print_error "Docker not available and log file not found"
        fi
    fi
}

cmd_stats() {
    print_header
    print_info "Fetching library statistics..."
    check_node_app
    
    node "$APP_DIR/dist/cli.js" stats "$@"
}

cmd_config() {
    print_header
    print_info "Current configuration:"
    echo
    
    # Show sanitized config (hide sensitive data)
    echo -e "${CYAN}LastFM:${NC}"
    echo -e "  API Key: ${LASTFM_API_KEY:0:8}***"
    echo -e "  Username: ${LASTFM_USERNAME:-Not set}"
    echo
    echo -e "${CYAN}Navidrome:${NC}"
    echo -e "  URL: ${NAVIDROME_URL:-Not set}"
    echo -e "  Username: ${NAVIDROME_USERNAME:-Not set}"
    echo
    echo -e "${CYAN}Slskd:${NC}"
    echo -e "  URL: ${SLSKD_URL:-Not set}"
    echo -e "  API Key: ${SLSKD_API_KEY:0:8}***"
    echo
    echo -e "${CYAN}Beets:${NC}"
    echo -e "  URL: ${BEETS_URL:-http://beets:8337}"
    echo -e "  Config Path: ${BEETS_CONFIG_PATH:-/config}"
    echo
    echo -e "${CYAN}Settings:${NC}"
    echo -e "  Cron Schedule: ${CRON_SCHEDULE:-0 */6 * * *}"
    echo -e "  Playlist Name: ${PLAYLIST_NAME:-LastFM Recommendations}"
    echo -e "  Clean on Refresh: ${CLEAN_PLAYLISTS_ON_REFRESH:-true}"
    echo -e "  Keep Downloaded: ${KEEP_DOWNLOADED_TRACKS:-true}"
    echo -e "  Max Retries: ${MAX_DOWNLOAD_RETRIES:-5}"
    echo -e "  Download Timeout: ${DOWNLOAD_TIMEOUT_MINUTES:-10} minutes"
    echo -e "  Concurrent Downloads: ${CONCURRENT_DOWNLOADS:-3}"
    echo -e "  Log Level: ${LOG_LEVEL:-info}"
    echo -e "  Dry Run: ${DRY_RUN:-false}"
}

cmd_import() {
    print_header
    print_info "Manually triggering beets import..."
    check_node_app
    
    node "$APP_DIR/dist/cli.js" import "$@"
}

cmd_cleanup() {
    print_header
    print_info "Cleaning up empty directories..."
    check_node_app
    
    node "$APP_DIR/dist/cli.js" cleanup "$@"
}

cmd_validate() {
    print_header
    print_info "Validating configuration..."
    check_node_app
    
    node "$APP_DIR/dist/cli.js" validate "$@"
}

# Docker helper commands
cmd_docker_status() {
    print_header
    print_info "Docker container status:"
    echo
    
    if command -v docker >/dev/null 2>&1; then
        echo -e "${CYAN}MusicSpree containers:${NC}"
        docker ps -a --filter "name=musicspree" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" || print_warning "No MusicSpree containers found"
        
        echo
        echo -e "${CYAN}Related containers:${NC}"
        docker ps -a --filter "name=navidrome" --filter "name=slskd" --filter "name=beets" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" || print_warning "No related containers found"
    else
        print_error "Docker not available"
    fi
}

cmd_docker_logs() {
    print_header
    
    if command -v docker >/dev/null 2>&1; then
        local container_name="musicspree"
        local tail_lines=100
        local follow=false
        
        # Parse arguments
        while [[ $# -gt 0 ]]; do
            case $1 in
                --container|-c)
                    container_name="$2"
                    shift 2
                    ;;
                --tail)
                    tail_lines="$2"
                    shift 2
                    ;;
                --follow|-f)
                    follow=true
                    shift
                    ;;
                *)
                    shift
                    ;;
            esac
        done
        
        if [ "$follow" = true ]; then
            print_info "Following Docker logs for $container_name (Ctrl+C to stop)..."
            docker logs -f --tail "$tail_lines" "$container_name" 2>/dev/null || print_error "Container $container_name not found"
        else
            print_info "Docker logs for $container_name (last $tail_lines lines):"
            docker logs --tail "$tail_lines" "$container_name" 2>/dev/null || print_error "Container $container_name not found"
        fi
    else
        print_error "Docker not available"
    fi
}

# Environment check
cmd_env_check() {
    print_header
    print_info "Environment check:"
    echo
    
    local issues=0
    
    # Check required environment variables
    local required_vars=("LASTFM_API_KEY" "LASTFM_USERNAME" "NAVIDROME_URL" "NAVIDROME_USERNAME" "NAVIDROME_PASSWORD" "SLSKD_URL" "SLSKD_API_KEY")
    
    echo -e "${CYAN}Required environment variables:${NC}"
    for var in "${required_vars[@]}"; do
        if [[ -z "${!var}" ]]; then
            echo -e "  ${RED}‚ùå $var: Not set${NC}"
            ((issues++))
        else
            if [[ "$var" == *"PASSWORD"* || "$var" == *"SECRET"* || "$var" == *"KEY"* ]]; then
                echo -e "  ${GREEN}‚úÖ $var: Set (hidden)${NC}"
            else
                echo -e "  ${GREEN}‚úÖ $var: ${!var}${NC}"
            fi
        fi
    done
    
    echo
    echo -e "${CYAN}File system:${NC}"
    
    # Check directories
    local dirs=("$APP_DIR/data" "$APP_DIR/dist")
    for dir in "${dirs[@]}"; do
        if [[ -d "$dir" ]]; then
            echo -e "  ${GREEN}‚úÖ Directory $dir exists${NC}"
        else
            echo -e "  ${RED}‚ùå Directory $dir missing${NC}"
            ((issues++))
        fi
    done
    
    # Check Node.js app
    if [[ -f "$APP_DIR/dist/cli.js" ]]; then
        echo -e "  ${GREEN}‚úÖ CLI application built${NC}"
    else
        echo -e "  ${RED}‚ùå CLI application not built (run 'npm run build')${NC}"
        ((issues++))
    fi
    
    echo
    if [[ $issues -eq 0 ]]; then
        print_success "Environment check passed!"
    else
        print_error "Environment check failed with $issues issues"
        return 1
    fi
}

# Main command dispatcher
main() {
    local command=""
    
    if [ $# -eq 0 ]; then
        cmd_help
        exit 0
    fi
    
    command="$1"
    shift
    
    case "$command" in
        sync)
            cmd_sync "$@"
            ;;
        dry)
            cmd_dry "$@"
            ;;
        clear)
            cmd_clear "$@"
            ;;
        status)
            cmd_status "$@"
            ;;
        test)
            cmd_test "$@"
            ;;
        logs)
            cmd_logs "$@"
            ;;
        stats)
            cmd_stats "$@"
            ;;
        config)
            cmd_config "$@"
            ;;
        import)
            cmd_import "$@"
            ;;
        cleanup)
            cmd_cleanup "$@"
            ;;
        validate)
            cmd_validate "$@"
            ;;
        docker-status)
            cmd_docker_status "$@"
            ;;
        docker-logs)
            cmd_docker_logs "$@"
            ;;
        env-check)
            cmd_env_check "$@"
            ;;
        help|--help|-h)
            cmd_help
            ;;
        *)
            print_error "Unknown command: $command"
            echo
            cmd_help
            exit 1
            ;;
    esac
}

# Error handling
set -E
trap 'print_error "Command failed with exit code $?"' ERR

# Run main function
main "$@"